/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_datatype_free(a: number): void;
export function datatype_toJSON(a: number): number;
export function datatype_toString(a: number, b: number): void;
export function datatype_from(a: number): number;
export function __wbg_field_free(a: number): void;
export function field_toJSON(a: number): number;
export function field_toString(a: number, b: number): void;
export function field_name(a: number, b: number): void;
export function field_isNullable(a: number): number;
export function field_dictId(a: number, b: number): void;
export function field_dictIsOrdered(a: number): number;
export function field_dataType(a: number): number;
export function field_from(a: number): number;
export function __wbg_recordbatch_free(a: number): void;
export function recordbatch_numRows(a: number): number;
export function recordbatch_numColumns(a: number): number;
export function recordbatch_schema(a: number): number;
export function recordbatch_column(a: number, b: number): number;
export function recordbatch_columns(a: number): number;
export function recordbatch_columnWithName(a: number, b: number, c: number): number;
export function __wbg_schema_free(a: number): void;
export function schema_toJSON(a: number): number;
export function schema_toString(a: number, b: number): void;
export function schema_field(a: number, b: number): number;
export function schema_fields(a: number): number;
export function schema_numFields(a: number): number;
export function schema_columnWithName(a: number, b: number, c: number): number;
export function schema_indexOf(a: number, b: number, c: number): number;
export function schema_fieldWithName(a: number, b: number, c: number): number;
export function schema_metadata(a: number): number;
export function schema_from(a: number): number;
export function __wbg_table_free(a: number): void;
export function table_schema(a: number): number;
export function table_recordBatch(a: number, b: number): number;
export function table_numBatches(a: number): number;
export function table_from(a: number, b: number): number;
export function table_fromWasmUint8Array(a: number): number;
export function table_serialize(a: number): number;
export function __wbg_wasmuint8array_free(a: number): void;
export function wasmuint8array_new(a: number): number;
export function wasmuint8array_view(a: number): number;
export function __wbg_arrowvectorffi_free(a: number): void;
export function __wbg_get_arrowvectorffi_array(a: number): number;
export function __wbg_set_arrowvectorffi_array(a: number, b: number): void;
export function __wbg_get_arrowvectorffi_schema(a: number): number;
export function __wbg_set_arrowvectorffi_schema(a: number, b: number): void;
export function __wbg_vector_free(a: number): void;
export function vector_fromRaw(a: number, b: number): number;
export function vector_toString(a: number, b: number): void;
export function vector_length(a: number): number;
export function vector_isValid(a: number, b: number): number;
export function vector_isNull(a: number, b: number): number;
export function vector_isEmpty(a: number): number;
export function vector_nullCount(a: number): number;
export function vector_toRaw(a: number): number;
export function int8vector_toString(a: number, b: number): void;
export function int8vector_toRaw(a: number): number;
export function int8vector_get(a: number, b: number): number;
export function int8vector_slice(a: number, b: number, c: number): number;
export function int8vector_limit(a: number, b: number): number;
export function int8vector_from(a: number, b: number): number;
export function int8vector_toJSON(a: number): number;
export function int8vector_sum(a: number): number;
export function int8vector_min(a: number): number;
export function int8vector_max(a: number): number;
export function vector_asInt8Vector(a: number): number;
export function int8vector_toArray(a: number): number;
export function int8vector_view(a: number): number;
export function int16vector_toString(a: number, b: number): void;
export function int16vector_get(a: number, b: number): number;
export function int16vector_slice(a: number, b: number, c: number): number;
export function int16vector_limit(a: number, b: number): number;
export function int16vector_from(a: number, b: number): number;
export function int16vector_toJSON(a: number): number;
export function int16vector_sum(a: number): number;
export function int16vector_min(a: number): number;
export function int16vector_max(a: number): number;
export function vector_asInt16Vector(a: number): number;
export function int16vector_toArray(a: number): number;
export function int16vector_view(a: number): number;
export function int32vector_toString(a: number, b: number): void;
export function int32vector_get(a: number, b: number): number;
export function int32vector_from(a: number, b: number): number;
export function int32vector_toJSON(a: number): number;
export function int32vector_sum(a: number, b: number): void;
export function int32vector_min(a: number, b: number): void;
export function int32vector_max(a: number, b: number): void;
export function int32vector_toArray(a: number): number;
export function int32vector_view(a: number): number;
export function int64vector_toString(a: number, b: number): void;
export function int64vector_get(a: number, b: number, c: number): void;
export function int64vector_from(a: number, b: number): number;
export function int64vector_toJSON(a: number): number;
export function int64vector_sum(a: number, b: number): void;
export function int64vector_min(a: number, b: number): void;
export function int64vector_max(a: number, b: number): void;
export function int64vector_toArray(a: number, b: number): void;
export function uint8vector_toString(a: number, b: number): void;
export function uint8vector_get(a: number, b: number): number;
export function uint8vector_from(a: number, b: number): number;
export function uint8vector_toJSON(a: number): number;
export function uint8vector_sum(a: number): number;
export function uint8vector_min(a: number): number;
export function uint8vector_max(a: number): number;
export function uint8vector_toArray(a: number): number;
export function uint8vector_view(a: number): number;
export function uint16vector_toString(a: number, b: number): void;
export function uint16vector_get(a: number, b: number): number;
export function uint16vector_from(a: number, b: number): number;
export function uint16vector_toJSON(a: number): number;
export function uint16vector_sum(a: number): number;
export function uint16vector_min(a: number): number;
export function uint16vector_max(a: number): number;
export function uint16vector_toArray(a: number): number;
export function uint16vector_view(a: number): number;
export function uint32vector_toString(a: number, b: number): void;
export function uint32vector_from(a: number, b: number): number;
export function uint32vector_toJSON(a: number): number;
export function uint32vector_min(a: number, b: number): void;
export function uint32vector_max(a: number, b: number): void;
export function uint32vector_toArray(a: number): number;
export function uint32vector_view(a: number): number;
export function uint64vector_toString(a: number, b: number): void;
export function uint64vector_from(a: number, b: number): number;
export function uint64vector_toJSON(a: number): number;
export function uint64vector_min(a: number, b: number): void;
export function uint64vector_max(a: number, b: number): void;
export function float32vector_toString(a: number, b: number): void;
export function float32vector_length(a: number): number;
export function float32vector_isValid(a: number, b: number): number;
export function float32vector_isNull(a: number, b: number): number;
export function float32vector_isEmpty(a: number): number;
export function float32vector_nullCount(a: number): number;
export function float32vector_toRaw(a: number): number;
export function float32vector_get(a: number, b: number): number;
export function float32vector_slice(a: number, b: number, c: number): number;
export function float32vector_limit(a: number, b: number): number;
export function float32vector_from(a: number, b: number): number;
export function float32vector_toJSON(a: number): number;
export function float32vector_sum(a: number, b: number): void;
export function float32vector_min(a: number, b: number): void;
export function float32vector_max(a: number, b: number): void;
export function vector_asFloat32Vector(a: number): number;
export function float32vector_toArray(a: number): number;
export function float32vector_view(a: number): number;
export function float64vector_toString(a: number, b: number): void;
export function float64vector_get(a: number, b: number): number;
export function float64vector_slice(a: number, b: number, c: number): number;
export function float64vector_limit(a: number, b: number): number;
export function float64vector_from(a: number, b: number): number;
export function float64vector_toJSON(a: number): number;
export function float64vector_sum(a: number, b: number): void;
export function float64vector_min(a: number, b: number): void;
export function float64vector_max(a: number, b: number): void;
export function vector_asFloat64Vector(a: number): number;
export function float64vector_toArray(a: number): number;
export function float64vector_view(a: number): number;
export function __wbg_booleanvector_free(a: number): void;
export function booleanvector_toString(a: number, b: number): void;
export function booleanvector_length(a: number): number;
export function booleanvector_isValid(a: number, b: number): number;
export function booleanvector_isNull(a: number, b: number): number;
export function booleanvector_isEmpty(a: number): number;
export function booleanvector_nullCount(a: number): number;
export function booleanvector_toRaw(a: number): number;
export function booleanvector_get(a: number, b: number): number;
export function booleanvector_slice(a: number, b: number, c: number): number;
export function booleanvector_limit(a: number, b: number): number;
export function booleanvector_from(a: number, b: number, c: number): number;
export function booleanvector_toArray(a: number, b: number): void;
export function booleanvector_view(a: number): number;
export function booleanvector_toJSON(a: number): number;
export function vector_asBooleanVector(a: number): number;
export function __wbg_stringvector_free(a: number): void;
export function stringvector_toString(a: number, b: number): void;
export function stringvector_length(a: number): number;
export function stringvector_isValid(a: number, b: number): number;
export function stringvector_isNull(a: number, b: number): number;
export function stringvector_isEmpty(a: number): number;
export function stringvector_nullCount(a: number): number;
export function stringvector_toRaw(a: number): number;
export function stringvector_get(a: number, b: number, c: number): void;
export function stringvector_slice(a: number, b: number, c: number): number;
export function stringvector_limit(a: number, b: number): number;
export function stringvector_toJSON(a: number): number;
export function vector_asStringVector(a: number): number;
export function __wbg_int8vector_free(a: number): void;
export function __wbg_int32vector_free(a: number): void;
export function __wbg_int64vector_free(a: number): void;
export function __wbg_uint8vector_free(a: number): void;
export function __wbg_uint16vector_free(a: number): void;
export function __wbg_uint32vector_free(a: number): void;
export function __wbg_uint64vector_free(a: number): void;
export function __wbg_int16vector_free(a: number): void;
export function __wbg_float64vector_free(a: number): void;
export function __wbg_float32vector_free(a: number): void;
export function int8vector_isValid(a: number, b: number): number;
export function int8vector_isNull(a: number, b: number): number;
export function int32vector_isValid(a: number, b: number): number;
export function int32vector_isNull(a: number, b: number): number;
export function int64vector_isValid(a: number, b: number): number;
export function int64vector_isNull(a: number, b: number): number;
export function uint8vector_isValid(a: number, b: number): number;
export function uint8vector_isNull(a: number, b: number): number;
export function uint16vector_isValid(a: number, b: number): number;
export function uint16vector_isNull(a: number, b: number): number;
export function uint32vector_isValid(a: number, b: number): number;
export function uint32vector_isNull(a: number, b: number): number;
export function uint64vector_isValid(a: number, b: number): number;
export function uint64vector_isNull(a: number, b: number): number;
export function int16vector_isValid(a: number, b: number): number;
export function int16vector_isNull(a: number, b: number): number;
export function float64vector_isValid(a: number, b: number): number;
export function float64vector_isNull(a: number, b: number): number;
export function int8vector_isEmpty(a: number): number;
export function int32vector_isEmpty(a: number): number;
export function int64vector_isEmpty(a: number): number;
export function uint8vector_isEmpty(a: number): number;
export function uint16vector_isEmpty(a: number): number;
export function uint32vector_isEmpty(a: number): number;
export function uint64vector_isEmpty(a: number): number;
export function int16vector_isEmpty(a: number): number;
export function float64vector_isEmpty(a: number): number;
export function uint64vector_sum(a: number, b: number): void;
export function uint64vector_get(a: number, b: number, c: number): void;
export function uint64vector_toArray(a: number, b: number): void;
export function uint8vector_limit(a: number, b: number): number;
export function uint16vector_limit(a: number, b: number): number;
export function uint32vector_limit(a: number, b: number): number;
export function uint64vector_limit(a: number, b: number): number;
export function int32vector_limit(a: number, b: number): number;
export function int64vector_limit(a: number, b: number): number;
export function uint32vector_get(a: number, b: number): number;
export function vector_asUint8Vector(a: number): number;
export function vector_asUint16Vector(a: number): number;
export function vector_asUint32Vector(a: number): number;
export function vector_asUint64Vector(a: number): number;
export function vector_asInt32Vector(a: number): number;
export function vector_asInt64Vector(a: number): number;
export function uint8vector_slice(a: number, b: number, c: number): number;
export function uint16vector_slice(a: number, b: number, c: number): number;
export function uint32vector_slice(a: number, b: number, c: number): number;
export function uint64vector_slice(a: number, b: number, c: number): number;
export function int32vector_slice(a: number, b: number, c: number): number;
export function int64vector_slice(a: number, b: number, c: number): number;
export function uint32vector_sum(a: number, b: number): void;
export function int8vector_length(a: number): number;
export function int8vector_nullCount(a: number): number;
export function int32vector_length(a: number): number;
export function int32vector_nullCount(a: number): number;
export function int64vector_length(a: number): number;
export function int64vector_nullCount(a: number): number;
export function uint8vector_length(a: number): number;
export function uint8vector_nullCount(a: number): number;
export function uint16vector_length(a: number): number;
export function uint16vector_nullCount(a: number): number;
export function uint32vector_length(a: number): number;
export function uint32vector_nullCount(a: number): number;
export function uint64vector_length(a: number): number;
export function uint64vector_nullCount(a: number): number;
export function int16vector_length(a: number): number;
export function int16vector_nullCount(a: number): number;
export function float64vector_length(a: number): number;
export function float64vector_nullCount(a: number): number;
export function int32vector_toRaw(a: number): number;
export function int64vector_toRaw(a: number): number;
export function uint8vector_toRaw(a: number): number;
export function uint16vector_toRaw(a: number): number;
export function uint32vector_toRaw(a: number): number;
export function uint64vector_toRaw(a: number): number;
export function int16vector_toRaw(a: number): number;
export function float64vector_toRaw(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
